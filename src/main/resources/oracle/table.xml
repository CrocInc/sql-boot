<!--
  ~ The MIT License (MIT)
  ~
  ~ Copyright (c) 2016-2017 mgramin
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  ~ SOFTWARE.
  ~
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"
        profile="oracle">


    <bean name="table,tbl,t" parent="parentSchemaObjectBean">
        <property name="name" value="table" />
        <property name="aliases" value="table,tbl,t" />
        <property name="child">
            <list>
                <!--<value>#{pk}</value>-->
                <!--<value>#{fk}</value>-->
                <!--<value>#{index}</value>-->
                <!--<value>#{trigger}</value>-->
                <!--<value>#{table_grant}</value>-->
                <!--<value>#{table_comment}</value>-->
            </list>
        </property>
        <property name="readers">
            <bean parent="baseSqlReader">
                <constructor-arg name="actionGenerator">
                    <bean parent="plainTextTemplateGenerator" c:baseText="${tables}" />
                </constructor-arg>
            </bean>
        </property>
        <property name="aggregators">
            <bean class="com.github.mgramin.sqlboot.model.DbSchemaObjectTypeAggregator">
                <property name="aggregatorName" value="sql"/>
                <property name="commands">
                    <list>
                        <bean parent="plainTextTemplateSqlGenerator" c:baseText="${table.sql.create}"/>
                        <bean parent="plainTextTemplateGenerator" c:baseText="${table.sql.drop}" c:command-ref="DROP"/>
                    </list>
                </property>
            </bean>
        </property>
<!--        <property name="commands">
            <list>
                <bean name="createTable" parent="parentSQLGeneratorBean">
                    <property name="filePath" value="${schema?lower_case}/tables/${table?lower_case}/ddl.sql" />
                    <property name="sql">
                        <value>
                            select DBMS_METADATA.GET_DDL('TABLE', '${table}', '${schema}') as ddl from dual
                        </value>
                    </property>
                </bean>
                <bean name="dropTable" parent="plainTextTemplateGenerator">
                    <property name="dbSchemaObjectCommand" ref="DROP" />
                    <property name="template" >
                        <value>drop table ${schema}.${table};</value>
                    </property>
                </bean>
            </list>
        </property>-->
    </bean>


<!--    <bean name="index,idx,i" parent="parentSchemaObjectBean">
        <property name="name" value="index" />
        <property name="sql">
            <value>
                select i.owner as "schema"
                     , i.table_name as "table"
                     , i.index_name as "index"
                  from all_indexes i
                 where lower(i.owner) like '${@schema}'
                   and lower(i.table_name) like '${@table}'
                   and lower(i.index_name) like '${@index}'
            </value>
        </property>
        <property name="commands">
            <list>
                <bean name="create" parent="parentSQLGeneratorBean">
                    <property name="filePath" value="${schema?lower_case}/tables/${table?lower_case}/indexes/${index?lower_case}.sql" />
                    <property name="sql" >
                        <value>select DBMS_METADATA.GET_DDL('INDEX', '${index}', '${schema}') as ddl from DUAL</value>
                    </property>
                </bean>
                <bean name="drop" parent="plainTextTemplateGenerator">
                    <property nadbResourceCommandmand" ref="DROP" />
                    <property name="template" >
                        <value>drop index ${schema}.${index};</value>
                    </property>
                </bean>
                <bean name="drop_if_exists" parent="plainTextTemplateGenerator">
                    <property nadbResourceCommandmand" ref="DROP_IF_EXISTS" />
                    <property name="template" >
                        <value>
                            begin
                                drop index ${schema}.${index};
                            end;
                            /
                        </value>
                    </property>
                </bean>
                <bean name="rebuild" parent="plainTextTemplateGenerator">
                    <property nadbResourceCommandmand" ref="REBUILD" />
                    <property name="template" >
                        <value>alter index ${schema}.${index} rebuild;</value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


    <bean name="trigger,trg,tr" parent="parentSchemaObjectBean">
        <property name="name" value="trigger" />
        <property name="sql" >
            <value>
                select c.owner as "schema"
                     , c.table_name as "table"
                     , c.trigger_name as "trigger"
                  from all_triggers c
                 where lower(c.owner) like '${@schema}'
                   and lower(c.table_name) like '${@table}'
                   and lower(c.trigger_name) like '${@trigger}'
            </value>
        </property>
        <property name="commands">
            <list>
                <bean id="createTrigger" parent="parentSQLGeneratorBean">
                    <property name="filePath" value="${schema?lower_case}/tables/${table?lower_case}/triggers/${trigger?lower_case}.sql" />
                    <property name="sql" >
                        <value>
                            select DBMS_METADATA.GET_DDL('TRIGGER', '${trigger}', '${schema}') as ddl from DUAL
                        </value>
                    </property>
                </bean>
                <bean id="dropTrigger" parent="plainTextTemplateGenerator">
                    <property nadbResourceCommandmand" ref="DROP" />
                    <property name="template">
                        <value>drop trigger ${schema}.${trigger};</value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


    <bean name="pk" parent="parentSchemaObjectBean">
        <property name="name" value="pk" />
        <property name="sql" >
            <value>
                select c.owner as "schema"
                     , c.table_name as "table"
                     , c.constraint_name as "pk"
                  from all_constraints c
                 where c.constraint_type = 'P'
                   and lower(c.owner) like '${@schema}'
                   and lower(c.table_name) like '${@table}'
                   and lower(c.constraint_name) like '${@pk}'
            </value>
        </property>
        <property name="commands">
            <list>
                <bean id="createPK" parent="parentSQLGeneratorBean">
                    <property name="filePath" value="${schema?lower_case}/tables/${table?lower_case}/pk.sql" />
                    <property name="sql" >
                        <value>
                            select dbms_metadata.get_ddl('CONSTRAINT', '${pk}', '${schema}') as ddl
                              from DUAL
                        </value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


    <bean name="fk" parent="parentSchemaObjectBean">
        <property name="name" value="fk" />
        <property name="sql" >
            <value>
                select c.owner as "schema"
                     , c.table_name as "table"
                     , c.constraint_name as "fk"
                  from all_constraints c
                     , all_objects o
                 where c.constraint_type = 'R'
                   and o.object_name = c.table_name
                   and lower(c.owner) like '${@schema}'
                   and lower(c.table_name) like '${@table}'
                   and lower(c.constraint_name) like '${@fk}'
            </value>
        </property>
        <property name="commands">
            <list>
                <bean id="createFk" parent="parentSQLGeneratorBean">
                    <property name="filePath" value="${schema?lower_case}/tables/${table?lower_case}/fk/${fk?lower_case}.sql" />
                    <property name="sql" >
                        <value>
                            select DBMS_METADATA.GET_DDL('REF_CONSTRAINT', '${fk}', '${schema}') as ddl from DUAL
                        </value>
                    </property>
                </bean>
                <bean id="dropFk" parent="plainTextTemplateGenerator">
                    <property nadbResourceCommandmand" ref="DROP" />
                    <property name="template">
                        <value>alter table ${schema}.${table} drop constraint ${fk};</value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


    <bean name="table_grant,tg" parent="parentSchemaObjectBean">
        <property name="name" value="tables grant" />
        <property name="sql">
            <value>
                select distinct t.owner as "schema"
                     , p.table_name as "table"
                  from all_objects t
                     , all_tab_privs p
                 where t.object_name = p.TABLE_NAME
                   and t.object_type = 'TABLE'
                   and lower(t.owner) like '${@schema}'
                   and lower(p.TABLE_NAME) like '${@table}'
            </value>
        </property>
        <property name="commands">
            <list>
                <bean id="grantTable" parent="parentSQLGeneratorBean">
                    <property name="filePath" value="${schema?lower_case}/tables/${table?lower_case}/grants.sql" />
                    <property name="sql" >
                        <value>
                            select DBMS_METADATA.GET_DEPENDENT_DDL('OBJECT_GRANT', '${table}') as ddl
                              from DUAL
                        </value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>



    <bean name="table_comment,tc" parent="parentSchemaObjectBean">
        <property name="name" value="tables grant" />
        <property name="sql">
            <value>
                select utc.owner as "schema"
                     , utc.table_name as "table"
                  from all_tab_comments utc
                 where utc.table_type = 'TABLE'
                   and utc.COMMENTS is not null
                   and lower(utc.owner) like '${@schema}'
                   and lower(utc.table_name) like '${@table}'
            </value>
        </property>
        <property name="commands">
            <list>
                <bean id="commentTable" parent="parentSQLGeneratorBean">
                    <property name="filePath" value="${schema?lower_case}/tables/${table?lower_case}/comments.sql" />
                    <property name="sql" >
                        <value>
                            select DBMS_METADATA.GET_DEPENDENT_DDL('COMMENT', '${table}') as ddl
                            from DUAL
                        </value>
                    </property>
                </bean>
            </list>
        </property>
    </bean>-->

</beans>