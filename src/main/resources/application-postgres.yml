tables: |
  select t.table_schema     as "schema"
       , t.table_name       as "table"
    from information_schema.tables t
   where t.table_type='BASE TABLE'
     and lower(t.table_schema) like '$schema'
     and lower(t.table_name) like '$table'

table.sql.create: |
  create table "$schema"."$table.name" (<%srv.get('column').each {%>
    !{it.name().padRight(20)}!{it.headers().data_type.toLowerCase()}!{it.headers().length}<%if (it != srv.get('column').last()){%>,<%}}%>
  );

table.sql.drop: |
  drop table $schema.$table.name;

table.columns: |
  select c.table_schema     as "schema"
       , c.table_name       as "table"
       , c.column_name      as "column"
       , c.udt_name         as "@data_type"
       , case when c.udt_name like 'varchar%' then '('|| c.character_maximum_length ||')' end as "@length"
       , c.is_nullable      as "@is_nullable"
       , c.column_default   as "@column_default"
    from information_schema.columns c
        ,information_schema.tables t
   where t.table_schema = c.table_schema
     and t.table_name = c.table_name
     and t.table_type='BASE TABLE'
     and lower(c.table_schema) like '$schema'
     and lower(c.table_name) like '$table'
     and lower(c.column_name) like '$column'
   order by c.ordinal_position asc


table.column.sql.create: |
  alter table $table add column $column.name;

table.column.sql.drop: |
  alter table $table drop $column.name;


table.indexes: |
  select schemaname as "schema"
       , table as "table"
       , indexname as "index"
    from pg_indexes
   where tablename like '$schema'
     and schemaname like '$table'
     and indexname like '$index'

table.pk: |
  select constraint_name as "pk"
    from information_schema.table_constraints
   where constraint_type  = 'PRIMARY KEY'
     and table_schema like '$schema'
     and table_name like '$table'
     and constraint_name like '$pk'


table.data:
  select * from $schema.$table
